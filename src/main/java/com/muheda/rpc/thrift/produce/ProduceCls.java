package com.muheda.rpc.thrift.produce;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-07-04")
public class ProduceCls {

  public interface Iface {

    public java.util.List<RoadDouble> getRoadByRectByType(RectDouble rect, int nType) throws org.apache.thrift.TException;

    public java.util.List<RoadDouble> getRoadByRectDouble(RectDouble rect, boolean isPrecision, int maxDist) throws org.apache.thrift.TException;

    public java.util.List<RoadLong> getRoadByRectLong(RectLong rect, boolean isPrecision, int maxDist) throws org.apache.thrift.TException;

    public long getDelta() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getRoadByRectByType(RectDouble rect, int nType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadDouble>> resultHandler) throws org.apache.thrift.TException;

    public void getRoadByRectDouble(RectDouble rect, boolean isPrecision, int maxDist, org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadDouble>> resultHandler) throws org.apache.thrift.TException;

    public void getRoadByRectLong(RectLong rect, boolean isPrecision, int maxDist, org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadLong>> resultHandler) throws org.apache.thrift.TException;

    public void getDelta(org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<RoadDouble> getRoadByRectByType(RectDouble rect, int nType) throws org.apache.thrift.TException
    {
      send_getRoadByRectByType(rect, nType);
      return recv_getRoadByRectByType();
    }

    public void send_getRoadByRectByType(RectDouble rect, int nType) throws org.apache.thrift.TException
    {
      getRoadByRectByType_args args = new getRoadByRectByType_args();
      args.setRect(rect);
      args.setNType(nType);
      sendBase("getRoadByRectByType", args);
    }

    public java.util.List<RoadDouble> recv_getRoadByRectByType() throws org.apache.thrift.TException
    {
      getRoadByRectByType_result result = new getRoadByRectByType_result();
      receiveBase(result, "getRoadByRectByType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRoadByRectByType failed: unknown result");
    }

    public java.util.List<RoadDouble> getRoadByRectDouble(RectDouble rect, boolean isPrecision, int maxDist) throws org.apache.thrift.TException
    {
      send_getRoadByRectDouble(rect, isPrecision, maxDist);
      return recv_getRoadByRectDouble();
    }

    public void send_getRoadByRectDouble(RectDouble rect, boolean isPrecision, int maxDist) throws org.apache.thrift.TException
    {
      getRoadByRectDouble_args args = new getRoadByRectDouble_args();
      args.setRect(rect);
      args.setIsPrecision(isPrecision);
      args.setMaxDist(maxDist);
      sendBase("getRoadByRectDouble", args);
    }

    public java.util.List<RoadDouble> recv_getRoadByRectDouble() throws org.apache.thrift.TException
    {
      getRoadByRectDouble_result result = new getRoadByRectDouble_result();
      receiveBase(result, "getRoadByRectDouble");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRoadByRectDouble failed: unknown result");
    }

    public java.util.List<RoadLong> getRoadByRectLong(RectLong rect, boolean isPrecision, int maxDist) throws org.apache.thrift.TException
    {
      send_getRoadByRectLong(rect, isPrecision, maxDist);
      return recv_getRoadByRectLong();
    }

    public void send_getRoadByRectLong(RectLong rect, boolean isPrecision, int maxDist) throws org.apache.thrift.TException
    {
      getRoadByRectLong_args args = new getRoadByRectLong_args();
      args.setRect(rect);
      args.setIsPrecision(isPrecision);
      args.setMaxDist(maxDist);
      sendBase("getRoadByRectLong", args);
    }

    public java.util.List<RoadLong> recv_getRoadByRectLong() throws org.apache.thrift.TException
    {
      getRoadByRectLong_result result = new getRoadByRectLong_result();
      receiveBase(result, "getRoadByRectLong");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRoadByRectLong failed: unknown result");
    }

    public long getDelta() throws org.apache.thrift.TException
    {
      send_getDelta();
      return recv_getDelta();
    }

    public void send_getDelta() throws org.apache.thrift.TException
    {
      getDelta_args args = new getDelta_args();
      sendBase("getDelta", args);
    }

    public long recv_getDelta() throws org.apache.thrift.TException
    {
      getDelta_result result = new getDelta_result();
      receiveBase(result, "getDelta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDelta failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getRoadByRectByType(RectDouble rect, int nType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadDouble>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRoadByRectByType_call method_call = new getRoadByRectByType_call(rect, nType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRoadByRectByType_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<RoadDouble>> {
      private RectDouble rect;
      private int nType;
      public getRoadByRectByType_call(RectDouble rect, int nType, org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadDouble>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rect = rect;
        this.nType = nType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRoadByRectByType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRoadByRectByType_args args = new getRoadByRectByType_args();
        args.setRect(rect);
        args.setNType(nType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<RoadDouble> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRoadByRectByType();
      }
    }

    public void getRoadByRectDouble(RectDouble rect, boolean isPrecision, int maxDist, org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadDouble>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRoadByRectDouble_call method_call = new getRoadByRectDouble_call(rect, isPrecision, maxDist, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRoadByRectDouble_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<RoadDouble>> {
      private RectDouble rect;
      private boolean isPrecision;
      private int maxDist;
      public getRoadByRectDouble_call(RectDouble rect, boolean isPrecision, int maxDist, org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadDouble>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rect = rect;
        this.isPrecision = isPrecision;
        this.maxDist = maxDist;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRoadByRectDouble", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRoadByRectDouble_args args = new getRoadByRectDouble_args();
        args.setRect(rect);
        args.setIsPrecision(isPrecision);
        args.setMaxDist(maxDist);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<RoadDouble> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRoadByRectDouble();
      }
    }

    public void getRoadByRectLong(RectLong rect, boolean isPrecision, int maxDist, org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadLong>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRoadByRectLong_call method_call = new getRoadByRectLong_call(rect, isPrecision, maxDist, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRoadByRectLong_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<RoadLong>> {
      private RectLong rect;
      private boolean isPrecision;
      private int maxDist;
      public getRoadByRectLong_call(RectLong rect, boolean isPrecision, int maxDist, org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadLong>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rect = rect;
        this.isPrecision = isPrecision;
        this.maxDist = maxDist;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRoadByRectLong", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRoadByRectLong_args args = new getRoadByRectLong_args();
        args.setRect(rect);
        args.setIsPrecision(isPrecision);
        args.setMaxDist(maxDist);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<RoadLong> getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRoadByRectLong();
      }
    }

    public void getDelta(org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDelta_call method_call = new getDelta_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDelta_call extends org.apache.thrift.async.TAsyncMethodCall<Long> {
      public getDelta_call(org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDelta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDelta_args args = new getDelta_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Long getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDelta();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getRoadByRectByType", new getRoadByRectByType());
      processMap.put("getRoadByRectDouble", new getRoadByRectDouble());
      processMap.put("getRoadByRectLong", new getRoadByRectLong());
      processMap.put("getDelta", new getDelta());
      return processMap;
    }

    public static class getRoadByRectByType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRoadByRectByType_args> {
      public getRoadByRectByType() {
        super("getRoadByRectByType");
      }

      public getRoadByRectByType_args getEmptyArgsInstance() {
        return new getRoadByRectByType_args();
      }

      protected boolean isOneway() {
        return false;
      }

        @Override
        protected boolean handleRuntimeExceptions() {
            return false;
        }

        @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getRoadByRectByType_result getResult(I iface, getRoadByRectByType_args args) throws org.apache.thrift.TException {
        getRoadByRectByType_result result = new getRoadByRectByType_result();
        result.success = iface.getRoadByRectByType(args.rect, args.nType);
        return result;
      }
    }

    public static class getRoadByRectDouble<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRoadByRectDouble_args> {
      public getRoadByRectDouble() {
        super("getRoadByRectDouble");
      }

      public getRoadByRectDouble_args getEmptyArgsInstance() {
        return new getRoadByRectDouble_args();
      }

      protected boolean isOneway() {
        return false;
      }

        @Override
        protected boolean handleRuntimeExceptions() {
            return false;
        }

        @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getRoadByRectDouble_result getResult(I iface, getRoadByRectDouble_args args) throws org.apache.thrift.TException {
        getRoadByRectDouble_result result = new getRoadByRectDouble_result();
        result.success = iface.getRoadByRectDouble(args.rect, args.isPrecision, args.maxDist);
        return result;
      }
    }

    public static class getRoadByRectLong<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRoadByRectLong_args> {
      public getRoadByRectLong() {
        super("getRoadByRectLong");
      }

      public getRoadByRectLong_args getEmptyArgsInstance() {
        return new getRoadByRectLong_args();
      }

      protected boolean isOneway() {
        return false;
      }

        @Override
        protected boolean handleRuntimeExceptions() {
            return false;
        }

        @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getRoadByRectLong_result getResult(I iface, getRoadByRectLong_args args) throws org.apache.thrift.TException {
        getRoadByRectLong_result result = new getRoadByRectLong_result();
        result.success = iface.getRoadByRectLong(args.rect, args.isPrecision, args.maxDist);
        return result;
      }
    }

    public static class getDelta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDelta_args> {
      public getDelta() {
        super("getDelta");
      }

      public getDelta_args getEmptyArgsInstance() {
        return new getDelta_args();
      }

      protected boolean isOneway() {
        return false;
      }

        @Override
        protected boolean handleRuntimeExceptions() {
            return false;
        }

        @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getDelta_result getResult(I iface, getDelta_args args) throws org.apache.thrift.TException {
        getDelta_result result = new getDelta_result();
        result.success = iface.getDelta();
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getRoadByRectByType", new getRoadByRectByType());
      processMap.put("getRoadByRectDouble", new getRoadByRectDouble());
      processMap.put("getRoadByRectLong", new getRoadByRectLong());
      processMap.put("getDelta", new getDelta());
      return processMap;
    }

    public static class getRoadByRectByType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRoadByRectByType_args, java.util.List<RoadDouble>> {
      public getRoadByRectByType() {
        super("getRoadByRectByType");
      }

      public getRoadByRectByType_args getEmptyArgsInstance() {
        return new getRoadByRectByType_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadDouble>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadDouble>>() { 
          public void onComplete(java.util.List<RoadDouble> o) {
            getRoadByRectByType_result result = new getRoadByRectByType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getRoadByRectByType_result result = new getRoadByRectByType_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRoadByRectByType_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadDouble>> resultHandler) throws org.apache.thrift.TException {
        iface.getRoadByRectByType(args.rect, args.nType,resultHandler);
      }
    }

    public static class getRoadByRectDouble<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRoadByRectDouble_args, java.util.List<RoadDouble>> {
      public getRoadByRectDouble() {
        super("getRoadByRectDouble");
      }

      public getRoadByRectDouble_args getEmptyArgsInstance() {
        return new getRoadByRectDouble_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadDouble>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadDouble>>() { 
          public void onComplete(java.util.List<RoadDouble> o) {
            getRoadByRectDouble_result result = new getRoadByRectDouble_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getRoadByRectDouble_result result = new getRoadByRectDouble_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRoadByRectDouble_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadDouble>> resultHandler) throws org.apache.thrift.TException {
        iface.getRoadByRectDouble(args.rect, args.isPrecision, args.maxDist,resultHandler);
      }
    }

    public static class getRoadByRectLong<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRoadByRectLong_args, java.util.List<RoadLong>> {
      public getRoadByRectLong() {
        super("getRoadByRectLong");
      }

      public getRoadByRectLong_args getEmptyArgsInstance() {
        return new getRoadByRectLong_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadLong>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadLong>>() { 
          public void onComplete(java.util.List<RoadLong> o) {
            getRoadByRectLong_result result = new getRoadByRectLong_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getRoadByRectLong_result result = new getRoadByRectLong_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRoadByRectLong_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<RoadLong>> resultHandler) throws org.apache.thrift.TException {
        iface.getRoadByRectLong(args.rect, args.isPrecision, args.maxDist,resultHandler);
      }
    }

    public static class getDelta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDelta_args, Long> {
      public getDelta() {
        super("getDelta");
      }

      public getDelta_args getEmptyArgsInstance() {
        return new getDelta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Long>() {
          public void onComplete(Long o) {
            getDelta_result result = new getDelta_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDelta_result result = new getDelta_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDelta_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws org.apache.thrift.TException {
        iface.getDelta(resultHandler);
      }
    }

  }

  public static class getRoadByRectByType_args implements org.apache.thrift.TBase<getRoadByRectByType_args, getRoadByRectByType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRoadByRectByType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoadByRectByType_args");

    private static final org.apache.thrift.protocol.TField RECT_FIELD_DESC = new org.apache.thrift.protocol.TField("rect", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField N_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRoadByRectByType_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRoadByRectByType_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable RectDouble rect; // required
    public int nType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECT((short)1, "rect"),
      N_TYPE((short)2, "nType");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECT
            return RECT;
          case 2: // N_TYPE
            return N_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NTYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECT, new org.apache.thrift.meta_data.FieldMetaData("rect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RectDouble.class)));
      tmpMap.put(_Fields.N_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoadByRectByType_args.class, metaDataMap);
    }

    public getRoadByRectByType_args() {
      this.nType = 0;

    }

    public getRoadByRectByType_args(
      RectDouble rect,
      int nType)
    {
      this();
      this.rect = rect;
      this.nType = nType;
      setNTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoadByRectByType_args(getRoadByRectByType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRect()) {
        this.rect = new RectDouble(other.rect);
      }
      this.nType = other.nType;
    }

    public getRoadByRectByType_args deepCopy() {
      return new getRoadByRectByType_args(this);
    }

    @Override
    public void clear() {
      this.rect = null;
      this.nType = 0;

    }

    @org.apache.thrift.annotation.Nullable
    public RectDouble getRect() {
      return this.rect;
    }

    public getRoadByRectByType_args setRect(@org.apache.thrift.annotation.Nullable RectDouble rect) {
      this.rect = rect;
      return this;
    }

    public void unsetRect() {
      this.rect = null;
    }

    /** Returns true if field rect is set (has been assigned a value) and false otherwise */
    public boolean isSetRect() {
      return this.rect != null;
    }

    public void setRectIsSet(boolean value) {
      if (!value) {
        this.rect = null;
      }
    }

    public int getNType() {
      return this.nType;
    }

    public getRoadByRectByType_args setNType(int nType) {
      this.nType = nType;
      setNTypeIsSet(true);
      return this;
    }

    public void unsetNType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NTYPE_ISSET_ID);
    }

    /** Returns true if field nType is set (has been assigned a value) and false otherwise */
    public boolean isSetNType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NTYPE_ISSET_ID);
    }

    public void setNTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NTYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case RECT:
        if (value == null) {
          unsetRect();
        } else {
          setRect((RectDouble)value);
        }
        break;

      case N_TYPE:
        if (value == null) {
          unsetNType();
        } else {
          setNType((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECT:
        return getRect();

      case N_TYPE:
        return getNType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECT:
        return isSetRect();
      case N_TYPE:
        return isSetNType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoadByRectByType_args)
        return this.equals((getRoadByRectByType_args)that);
      return false;
    }

    public boolean equals(getRoadByRectByType_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rect = true && this.isSetRect();
      boolean that_present_rect = true && that.isSetRect();
      if (this_present_rect || that_present_rect) {
        if (!(this_present_rect && that_present_rect))
          return false;
        if (!this.rect.equals(that.rect))
          return false;
      }

      boolean this_present_nType = true;
      boolean that_present_nType = true;
      if (this_present_nType || that_present_nType) {
        if (!(this_present_nType && that_present_nType))
          return false;
        if (this.nType != that.nType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRect()) ? 131071 : 524287);
      if (isSetRect())
        hashCode = hashCode * 8191 + rect.hashCode();

      hashCode = hashCode * 8191 + nType;

      return hashCode;
    }

    @Override
    public int compareTo(getRoadByRectByType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRect()).compareTo(other.isSetRect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rect, other.rect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNType()).compareTo(other.isSetNType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nType, other.nType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoadByRectByType_args(");
      boolean first = true;

      sb.append("rect:");
      if (this.rect == null) {
        sb.append("null");
      } else {
        sb.append(this.rect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nType:");
      sb.append(this.nType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rect != null) {
        rect.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoadByRectByType_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoadByRectByType_argsStandardScheme getScheme() {
        return new getRoadByRectByType_argsStandardScheme();
      }
    }

    private static class getRoadByRectByType_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRoadByRectByType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoadByRectByType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rect = new RectDouble();
                struct.rect.read(iprot);
                struct.setRectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nType = iprot.readI32();
                struct.setNTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoadByRectByType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rect != null) {
          oprot.writeFieldBegin(RECT_FIELD_DESC);
          struct.rect.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_TYPE_FIELD_DESC);
        oprot.writeI32(struct.nType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoadByRectByType_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoadByRectByType_argsTupleScheme getScheme() {
        return new getRoadByRectByType_argsTupleScheme();
      }
    }

    private static class getRoadByRectByType_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRoadByRectByType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoadByRectByType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRect()) {
          optionals.set(0);
        }
        if (struct.isSetNType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRect()) {
          struct.rect.write(oprot);
        }
        if (struct.isSetNType()) {
          oprot.writeI32(struct.nType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoadByRectByType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.rect = new RectDouble();
          struct.rect.read(iprot);
          struct.setRectIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nType = iprot.readI32();
          struct.setNTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRoadByRectByType_result implements org.apache.thrift.TBase<getRoadByRectByType_result, getRoadByRectByType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRoadByRectByType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoadByRectByType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRoadByRectByType_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRoadByRectByType_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<RoadDouble> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RoadDouble.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoadByRectByType_result.class, metaDataMap);
    }

    public getRoadByRectByType_result() {
    }

    public getRoadByRectByType_result(
      java.util.List<RoadDouble> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoadByRectByType_result(getRoadByRectByType_result other) {
      if (other.isSetSuccess()) {
        java.util.List<RoadDouble> __this__success = new java.util.ArrayList<RoadDouble>(other.success.size());
        for (RoadDouble other_element : other.success) {
          __this__success.add(new RoadDouble(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRoadByRectByType_result deepCopy() {
      return new getRoadByRectByType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<RoadDouble> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RoadDouble elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<RoadDouble>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<RoadDouble> getSuccess() {
      return this.success;
    }

    public getRoadByRectByType_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<RoadDouble> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<RoadDouble>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoadByRectByType_result)
        return this.equals((getRoadByRectByType_result)that);
      return false;
    }

    public boolean equals(getRoadByRectByType_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRoadByRectByType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoadByRectByType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoadByRectByType_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoadByRectByType_resultStandardScheme getScheme() {
        return new getRoadByRectByType_resultStandardScheme();
      }
    }

    private static class getRoadByRectByType_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRoadByRectByType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoadByRectByType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<RoadDouble>(_list16.size);
                  @org.apache.thrift.annotation.Nullable RoadDouble _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new RoadDouble();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoadByRectByType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RoadDouble _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoadByRectByType_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoadByRectByType_resultTupleScheme getScheme() {
        return new getRoadByRectByType_resultTupleScheme();
      }
    }

    private static class getRoadByRectByType_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRoadByRectByType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoadByRectByType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RoadDouble _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoadByRectByType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<RoadDouble>(_list21.size);
            @org.apache.thrift.annotation.Nullable RoadDouble _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new RoadDouble();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRoadByRectDouble_args implements org.apache.thrift.TBase<getRoadByRectDouble_args, getRoadByRectDouble_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRoadByRectDouble_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoadByRectDouble_args");

    private static final org.apache.thrift.protocol.TField RECT_FIELD_DESC = new org.apache.thrift.protocol.TField("rect", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IS_PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("isPrecision", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField MAX_DIST_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDist", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRoadByRectDouble_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRoadByRectDouble_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable RectDouble rect; // required
    public boolean isPrecision; // required
    public int maxDist; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECT((short)1, "rect"),
      IS_PRECISION((short)2, "isPrecision"),
      MAX_DIST((short)3, "maxDist");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECT
            return RECT;
          case 2: // IS_PRECISION
            return IS_PRECISION;
          case 3: // MAX_DIST
            return MAX_DIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISPRECISION_ISSET_ID = 0;
    private static final int __MAXDIST_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECT, new org.apache.thrift.meta_data.FieldMetaData("rect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RectDouble.class)));
      tmpMap.put(_Fields.IS_PRECISION, new org.apache.thrift.meta_data.FieldMetaData("isPrecision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MAX_DIST, new org.apache.thrift.meta_data.FieldMetaData("maxDist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoadByRectDouble_args.class, metaDataMap);
    }

    public getRoadByRectDouble_args() {
      this.isPrecision = false;

    }

    public getRoadByRectDouble_args(
      RectDouble rect,
      boolean isPrecision,
      int maxDist)
    {
      this();
      this.rect = rect;
      this.isPrecision = isPrecision;
      setIsPrecisionIsSet(true);
      this.maxDist = maxDist;
      setMaxDistIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoadByRectDouble_args(getRoadByRectDouble_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRect()) {
        this.rect = new RectDouble(other.rect);
      }
      this.isPrecision = other.isPrecision;
      this.maxDist = other.maxDist;
    }

    public getRoadByRectDouble_args deepCopy() {
      return new getRoadByRectDouble_args(this);
    }

    @Override
    public void clear() {
      this.rect = null;
      this.isPrecision = false;

      setMaxDistIsSet(false);
      this.maxDist = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public RectDouble getRect() {
      return this.rect;
    }

    public getRoadByRectDouble_args setRect(@org.apache.thrift.annotation.Nullable RectDouble rect) {
      this.rect = rect;
      return this;
    }

    public void unsetRect() {
      this.rect = null;
    }

    /** Returns true if field rect is set (has been assigned a value) and false otherwise */
    public boolean isSetRect() {
      return this.rect != null;
    }

    public void setRectIsSet(boolean value) {
      if (!value) {
        this.rect = null;
      }
    }

    public boolean isIsPrecision() {
      return this.isPrecision;
    }

    public getRoadByRectDouble_args setIsPrecision(boolean isPrecision) {
      this.isPrecision = isPrecision;
      setIsPrecisionIsSet(true);
      return this;
    }

    public void unsetIsPrecision() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISPRECISION_ISSET_ID);
    }

    /** Returns true if field isPrecision is set (has been assigned a value) and false otherwise */
    public boolean isSetIsPrecision() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISPRECISION_ISSET_ID);
    }

    public void setIsPrecisionIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISPRECISION_ISSET_ID, value);
    }

    public int getMaxDist() {
      return this.maxDist;
    }

    public getRoadByRectDouble_args setMaxDist(int maxDist) {
      this.maxDist = maxDist;
      setMaxDistIsSet(true);
      return this;
    }

    public void unsetMaxDist() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXDIST_ISSET_ID);
    }

    /** Returns true if field maxDist is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxDist() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXDIST_ISSET_ID);
    }

    public void setMaxDistIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXDIST_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case RECT:
        if (value == null) {
          unsetRect();
        } else {
          setRect((RectDouble)value);
        }
        break;

      case IS_PRECISION:
        if (value == null) {
          unsetIsPrecision();
        } else {
          setIsPrecision((Boolean)value);
        }
        break;

      case MAX_DIST:
        if (value == null) {
          unsetMaxDist();
        } else {
          setMaxDist((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECT:
        return getRect();

      case IS_PRECISION:
        return isIsPrecision();

      case MAX_DIST:
        return getMaxDist();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECT:
        return isSetRect();
      case IS_PRECISION:
        return isSetIsPrecision();
      case MAX_DIST:
        return isSetMaxDist();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoadByRectDouble_args)
        return this.equals((getRoadByRectDouble_args)that);
      return false;
    }

    public boolean equals(getRoadByRectDouble_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rect = true && this.isSetRect();
      boolean that_present_rect = true && that.isSetRect();
      if (this_present_rect || that_present_rect) {
        if (!(this_present_rect && that_present_rect))
          return false;
        if (!this.rect.equals(that.rect))
          return false;
      }

      boolean this_present_isPrecision = true;
      boolean that_present_isPrecision = true;
      if (this_present_isPrecision || that_present_isPrecision) {
        if (!(this_present_isPrecision && that_present_isPrecision))
          return false;
        if (this.isPrecision != that.isPrecision)
          return false;
      }

      boolean this_present_maxDist = true;
      boolean that_present_maxDist = true;
      if (this_present_maxDist || that_present_maxDist) {
        if (!(this_present_maxDist && that_present_maxDist))
          return false;
        if (this.maxDist != that.maxDist)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRect()) ? 131071 : 524287);
      if (isSetRect())
        hashCode = hashCode * 8191 + rect.hashCode();

      hashCode = hashCode * 8191 + ((isPrecision) ? 131071 : 524287);

      hashCode = hashCode * 8191 + maxDist;

      return hashCode;
    }

    @Override
    public int compareTo(getRoadByRectDouble_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRect()).compareTo(other.isSetRect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rect, other.rect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsPrecision()).compareTo(other.isSetIsPrecision());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsPrecision()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPrecision, other.isPrecision);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxDist()).compareTo(other.isSetMaxDist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxDist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDist, other.maxDist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoadByRectDouble_args(");
      boolean first = true;

      sb.append("rect:");
      if (this.rect == null) {
        sb.append("null");
      } else {
        sb.append(this.rect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isPrecision:");
      sb.append(this.isPrecision);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxDist:");
      sb.append(this.maxDist);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rect != null) {
        rect.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoadByRectDouble_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoadByRectDouble_argsStandardScheme getScheme() {
        return new getRoadByRectDouble_argsStandardScheme();
      }
    }

    private static class getRoadByRectDouble_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRoadByRectDouble_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoadByRectDouble_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rect = new RectDouble();
                struct.rect.read(iprot);
                struct.setRectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_PRECISION
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isPrecision = iprot.readBool();
                struct.setIsPrecisionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAX_DIST
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxDist = iprot.readI32();
                struct.setMaxDistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoadByRectDouble_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rect != null) {
          oprot.writeFieldBegin(RECT_FIELD_DESC);
          struct.rect.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_PRECISION_FIELD_DESC);
        oprot.writeBool(struct.isPrecision);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_DIST_FIELD_DESC);
        oprot.writeI32(struct.maxDist);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoadByRectDouble_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoadByRectDouble_argsTupleScheme getScheme() {
        return new getRoadByRectDouble_argsTupleScheme();
      }
    }

    private static class getRoadByRectDouble_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRoadByRectDouble_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoadByRectDouble_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRect()) {
          optionals.set(0);
        }
        if (struct.isSetIsPrecision()) {
          optionals.set(1);
        }
        if (struct.isSetMaxDist()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRect()) {
          struct.rect.write(oprot);
        }
        if (struct.isSetIsPrecision()) {
          oprot.writeBool(struct.isPrecision);
        }
        if (struct.isSetMaxDist()) {
          oprot.writeI32(struct.maxDist);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoadByRectDouble_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rect = new RectDouble();
          struct.rect.read(iprot);
          struct.setRectIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isPrecision = iprot.readBool();
          struct.setIsPrecisionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.maxDist = iprot.readI32();
          struct.setMaxDistIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRoadByRectDouble_result implements org.apache.thrift.TBase<getRoadByRectDouble_result, getRoadByRectDouble_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRoadByRectDouble_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoadByRectDouble_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRoadByRectDouble_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRoadByRectDouble_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<RoadDouble> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RoadDouble.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoadByRectDouble_result.class, metaDataMap);
    }

    public getRoadByRectDouble_result() {
    }

    public getRoadByRectDouble_result(
      java.util.List<RoadDouble> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoadByRectDouble_result(getRoadByRectDouble_result other) {
      if (other.isSetSuccess()) {
        java.util.List<RoadDouble> __this__success = new java.util.ArrayList<RoadDouble>(other.success.size());
        for (RoadDouble other_element : other.success) {
          __this__success.add(new RoadDouble(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRoadByRectDouble_result deepCopy() {
      return new getRoadByRectDouble_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<RoadDouble> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RoadDouble elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<RoadDouble>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<RoadDouble> getSuccess() {
      return this.success;
    }

    public getRoadByRectDouble_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<RoadDouble> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<RoadDouble>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoadByRectDouble_result)
        return this.equals((getRoadByRectDouble_result)that);
      return false;
    }

    public boolean equals(getRoadByRectDouble_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRoadByRectDouble_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoadByRectDouble_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoadByRectDouble_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoadByRectDouble_resultStandardScheme getScheme() {
        return new getRoadByRectDouble_resultStandardScheme();
      }
    }

    private static class getRoadByRectDouble_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRoadByRectDouble_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoadByRectDouble_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<RoadDouble>(_list24.size);
                  @org.apache.thrift.annotation.Nullable RoadDouble _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new RoadDouble();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoadByRectDouble_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RoadDouble _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoadByRectDouble_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoadByRectDouble_resultTupleScheme getScheme() {
        return new getRoadByRectDouble_resultTupleScheme();
      }
    }

    private static class getRoadByRectDouble_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRoadByRectDouble_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoadByRectDouble_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RoadDouble _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoadByRectDouble_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<RoadDouble>(_list29.size);
            @org.apache.thrift.annotation.Nullable RoadDouble _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new RoadDouble();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRoadByRectLong_args implements org.apache.thrift.TBase<getRoadByRectLong_args, getRoadByRectLong_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRoadByRectLong_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoadByRectLong_args");

    private static final org.apache.thrift.protocol.TField RECT_FIELD_DESC = new org.apache.thrift.protocol.TField("rect", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IS_PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("isPrecision", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField MAX_DIST_FIELD_DESC = new org.apache.thrift.protocol.TField("maxDist", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRoadByRectLong_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRoadByRectLong_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable RectLong rect; // required
    public boolean isPrecision; // required
    public int maxDist; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECT((short)1, "rect"),
      IS_PRECISION((short)2, "isPrecision"),
      MAX_DIST((short)3, "maxDist");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECT
            return RECT;
          case 2: // IS_PRECISION
            return IS_PRECISION;
          case 3: // MAX_DIST
            return MAX_DIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISPRECISION_ISSET_ID = 0;
    private static final int __MAXDIST_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECT, new org.apache.thrift.meta_data.FieldMetaData("rect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RectLong.class)));
      tmpMap.put(_Fields.IS_PRECISION, new org.apache.thrift.meta_data.FieldMetaData("isPrecision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MAX_DIST, new org.apache.thrift.meta_data.FieldMetaData("maxDist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoadByRectLong_args.class, metaDataMap);
    }

    public getRoadByRectLong_args() {
      this.isPrecision = false;

    }

    public getRoadByRectLong_args(
      RectLong rect,
      boolean isPrecision,
      int maxDist)
    {
      this();
      this.rect = rect;
      this.isPrecision = isPrecision;
      setIsPrecisionIsSet(true);
      this.maxDist = maxDist;
      setMaxDistIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoadByRectLong_args(getRoadByRectLong_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRect()) {
        this.rect = new RectLong(other.rect);
      }
      this.isPrecision = other.isPrecision;
      this.maxDist = other.maxDist;
    }

    public getRoadByRectLong_args deepCopy() {
      return new getRoadByRectLong_args(this);
    }

    @Override
    public void clear() {
      this.rect = null;
      this.isPrecision = false;

      setMaxDistIsSet(false);
      this.maxDist = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public RectLong getRect() {
      return this.rect;
    }

    public getRoadByRectLong_args setRect(@org.apache.thrift.annotation.Nullable RectLong rect) {
      this.rect = rect;
      return this;
    }

    public void unsetRect() {
      this.rect = null;
    }

    /** Returns true if field rect is set (has been assigned a value) and false otherwise */
    public boolean isSetRect() {
      return this.rect != null;
    }

    public void setRectIsSet(boolean value) {
      if (!value) {
        this.rect = null;
      }
    }

    public boolean isIsPrecision() {
      return this.isPrecision;
    }

    public getRoadByRectLong_args setIsPrecision(boolean isPrecision) {
      this.isPrecision = isPrecision;
      setIsPrecisionIsSet(true);
      return this;
    }

    public void unsetIsPrecision() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISPRECISION_ISSET_ID);
    }

    /** Returns true if field isPrecision is set (has been assigned a value) and false otherwise */
    public boolean isSetIsPrecision() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISPRECISION_ISSET_ID);
    }

    public void setIsPrecisionIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISPRECISION_ISSET_ID, value);
    }

    public int getMaxDist() {
      return this.maxDist;
    }

    public getRoadByRectLong_args setMaxDist(int maxDist) {
      this.maxDist = maxDist;
      setMaxDistIsSet(true);
      return this;
    }

    public void unsetMaxDist() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXDIST_ISSET_ID);
    }

    /** Returns true if field maxDist is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxDist() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXDIST_ISSET_ID);
    }

    public void setMaxDistIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXDIST_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case RECT:
        if (value == null) {
          unsetRect();
        } else {
          setRect((RectLong)value);
        }
        break;

      case IS_PRECISION:
        if (value == null) {
          unsetIsPrecision();
        } else {
          setIsPrecision((Boolean)value);
        }
        break;

      case MAX_DIST:
        if (value == null) {
          unsetMaxDist();
        } else {
          setMaxDist((Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECT:
        return getRect();

      case IS_PRECISION:
        return isIsPrecision();

      case MAX_DIST:
        return getMaxDist();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECT:
        return isSetRect();
      case IS_PRECISION:
        return isSetIsPrecision();
      case MAX_DIST:
        return isSetMaxDist();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoadByRectLong_args)
        return this.equals((getRoadByRectLong_args)that);
      return false;
    }

    public boolean equals(getRoadByRectLong_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rect = true && this.isSetRect();
      boolean that_present_rect = true && that.isSetRect();
      if (this_present_rect || that_present_rect) {
        if (!(this_present_rect && that_present_rect))
          return false;
        if (!this.rect.equals(that.rect))
          return false;
      }

      boolean this_present_isPrecision = true;
      boolean that_present_isPrecision = true;
      if (this_present_isPrecision || that_present_isPrecision) {
        if (!(this_present_isPrecision && that_present_isPrecision))
          return false;
        if (this.isPrecision != that.isPrecision)
          return false;
      }

      boolean this_present_maxDist = true;
      boolean that_present_maxDist = true;
      if (this_present_maxDist || that_present_maxDist) {
        if (!(this_present_maxDist && that_present_maxDist))
          return false;
        if (this.maxDist != that.maxDist)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRect()) ? 131071 : 524287);
      if (isSetRect())
        hashCode = hashCode * 8191 + rect.hashCode();

      hashCode = hashCode * 8191 + ((isPrecision) ? 131071 : 524287);

      hashCode = hashCode * 8191 + maxDist;

      return hashCode;
    }

    @Override
    public int compareTo(getRoadByRectLong_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRect()).compareTo(other.isSetRect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rect, other.rect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsPrecision()).compareTo(other.isSetIsPrecision());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsPrecision()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPrecision, other.isPrecision);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxDist()).compareTo(other.isSetMaxDist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxDist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxDist, other.maxDist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoadByRectLong_args(");
      boolean first = true;

      sb.append("rect:");
      if (this.rect == null) {
        sb.append("null");
      } else {
        sb.append(this.rect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isPrecision:");
      sb.append(this.isPrecision);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxDist:");
      sb.append(this.maxDist);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rect != null) {
        rect.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoadByRectLong_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoadByRectLong_argsStandardScheme getScheme() {
        return new getRoadByRectLong_argsStandardScheme();
      }
    }

    private static class getRoadByRectLong_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRoadByRectLong_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoadByRectLong_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rect = new RectLong();
                struct.rect.read(iprot);
                struct.setRectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_PRECISION
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isPrecision = iprot.readBool();
                struct.setIsPrecisionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAX_DIST
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxDist = iprot.readI32();
                struct.setMaxDistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoadByRectLong_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rect != null) {
          oprot.writeFieldBegin(RECT_FIELD_DESC);
          struct.rect.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_PRECISION_FIELD_DESC);
        oprot.writeBool(struct.isPrecision);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_DIST_FIELD_DESC);
        oprot.writeI32(struct.maxDist);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoadByRectLong_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoadByRectLong_argsTupleScheme getScheme() {
        return new getRoadByRectLong_argsTupleScheme();
      }
    }

    private static class getRoadByRectLong_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRoadByRectLong_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoadByRectLong_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRect()) {
          optionals.set(0);
        }
        if (struct.isSetIsPrecision()) {
          optionals.set(1);
        }
        if (struct.isSetMaxDist()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRect()) {
          struct.rect.write(oprot);
        }
        if (struct.isSetIsPrecision()) {
          oprot.writeBool(struct.isPrecision);
        }
        if (struct.isSetMaxDist()) {
          oprot.writeI32(struct.maxDist);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoadByRectLong_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rect = new RectLong();
          struct.rect.read(iprot);
          struct.setRectIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isPrecision = iprot.readBool();
          struct.setIsPrecisionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.maxDist = iprot.readI32();
          struct.setMaxDistIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRoadByRectLong_result implements org.apache.thrift.TBase<getRoadByRectLong_result, getRoadByRectLong_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRoadByRectLong_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoadByRectLong_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRoadByRectLong_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRoadByRectLong_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<RoadLong> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RoadLong.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoadByRectLong_result.class, metaDataMap);
    }

    public getRoadByRectLong_result() {
    }

    public getRoadByRectLong_result(
      java.util.List<RoadLong> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoadByRectLong_result(getRoadByRectLong_result other) {
      if (other.isSetSuccess()) {
        java.util.List<RoadLong> __this__success = new java.util.ArrayList<RoadLong>(other.success.size());
        for (RoadLong other_element : other.success) {
          __this__success.add(new RoadLong(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRoadByRectLong_result deepCopy() {
      return new getRoadByRectLong_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<RoadLong> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RoadLong elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<RoadLong>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<RoadLong> getSuccess() {
      return this.success;
    }

    public getRoadByRectLong_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<RoadLong> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<RoadLong>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoadByRectLong_result)
        return this.equals((getRoadByRectLong_result)that);
      return false;
    }

    public boolean equals(getRoadByRectLong_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRoadByRectLong_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoadByRectLong_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoadByRectLong_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoadByRectLong_resultStandardScheme getScheme() {
        return new getRoadByRectLong_resultStandardScheme();
      }
    }

    private static class getRoadByRectLong_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRoadByRectLong_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoadByRectLong_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<RoadLong>(_list32.size);
                  @org.apache.thrift.annotation.Nullable RoadLong _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new RoadLong();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoadByRectLong_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RoadLong _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoadByRectLong_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRoadByRectLong_resultTupleScheme getScheme() {
        return new getRoadByRectLong_resultTupleScheme();
      }
    }

    private static class getRoadByRectLong_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRoadByRectLong_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoadByRectLong_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RoadLong _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoadByRectLong_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<RoadLong>(_list37.size);
            @org.apache.thrift.annotation.Nullable RoadLong _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new RoadLong();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDelta_args implements org.apache.thrift.TBase<getDelta_args, getDelta_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDelta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDelta_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDelta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDelta_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDelta_args.class, metaDataMap);
    }

    public getDelta_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDelta_args(getDelta_args other) {
    }

    public getDelta_args deepCopy() {
      return new getDelta_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDelta_args)
        return this.equals((getDelta_args)that);
      return false;
    }

    public boolean equals(getDelta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getDelta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDelta_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDelta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDelta_argsStandardScheme getScheme() {
        return new getDelta_argsStandardScheme();
      }
    }

    private static class getDelta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDelta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDelta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDelta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDelta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDelta_argsTupleScheme getScheme() {
        return new getDelta_argsTupleScheme();
      }
    }

    private static class getDelta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDelta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDelta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDelta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDelta_result implements org.apache.thrift.TBase<getDelta_result, getDelta_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDelta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDelta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDelta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDelta_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDelta_result.class, metaDataMap);
    }

    public getDelta_result() {
    }

    public getDelta_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDelta_result(getDelta_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getDelta_result deepCopy() {
      return new getDelta_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getDelta_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDelta_result)
        return this.equals((getDelta_result)that);
      return false;
    }

    public boolean equals(getDelta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(getDelta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDelta_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDelta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDelta_resultStandardScheme getScheme() {
        return new getDelta_resultStandardScheme();
      }
    }

    private static class getDelta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDelta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDelta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDelta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDelta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDelta_resultTupleScheme getScheme() {
        return new getDelta_resultTupleScheme();
      }
    }

    private static class getDelta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDelta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDelta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDelta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
